1. ARRAY QUESTIONS

->REMOVE DUPLICATES FROM SORTED ARRAY
class Solution {
public:
    int removeDuplicates(vector<int>& A) {
        int count = 0;
        int n=A.size();
        for(int i = 1; i < n; i++){
         if(A[i] == A[i-1]) 
    {
        count++;
    }
    else A[i-count] = A[i];
}
        
return n-count;
    }
};

->BEST TIME TO BUY & SELL STOCK II
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        int i=n;
        int profit=0;
        for(int i=n-1;i>0;i--)
        {
            if(prices[i]>prices[i-1])
            {
                profit=profit+(prices[i]-prices[i-1]);
            }
        }
        return profit;
    }
};

->CONTAINS DUPLICATE
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size()-1;i++)
        {
            if(nums[i]==nums[i+1])
            {
                return true;
            }
        }
        return false;
    }
};

->SINGLE NUMBER
class Solution {
public:
    int singleNumber(vector<int>& nums) {
      
        sort(nums.begin(),nums.end());
        int count=0;
        if(nums.size()<=1)
        {
            return nums[0];
        }
        else
        {
        for(int i=0;i<nums.size();)
        {
            if(nums[i]==nums[i+1])
            {
                i=i+2;
            }
            else
            {
                count=nums[i];
                break;
            }
        }
        }  
        return count;
        
    }
};

->ROTATE ARRAY
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        vector <int> v(nums.size());
        int n=nums.size();

        for(int i=0;i<nums.size();i++)
        { 
            v[((i+k)%n)]=nums[i];
            
        }
        for(int j=0;j<n;j++){
            nums[j]=v[j];
        }
    }
};

2. STRING QUESTIONS

->REVERSE STRING
class Solution {
public:
    void reverseString(vector<char>& s) {
        int l=0;
        int r=s.size()-1;
        while(l<r)
            { 
                swap(s[l],s[r]);
                l++;
                r--;
            }
            
        }
};

->FIRST UNIQUE CHARACTER IN THE STRING
class Solution {
public:
    int firstUniqChar(string s) {
     vector<int> v(26);
        for(int i=0;i<s.size();i++)
        {
            v[s[i]-'a']++;
        }
        for(int i=0;i<s.size();i++)
        {
            if(v[s[i]-'a']==1)
                return i;
        }
        return -1;
    }
};

->VALID ANAGRAM
class Solution {
public:
    bool isAnagram(string s, string t) {
        int l=0;
        int r=0;
        if(s.size()!=t.size())
            return false;
        sort(s.begin(),s.end());
        sort(t.begin(),t.end());
        for(int i=0;i<s.size();i++)
        {
            if(s[i]!=t[i])
                return false;
        }
        return true;
    }
};

->VALID PALINDROME
class Solution {
public:
    bool isPalindrome(string s) {
        int l=0,r=s.size()-1;
        while(l<r)
        {
            if(!isalnum(s[l]))
                l++;
            else if(!isalnum(s[r]))
                r--;
            else if(tolower(s[l])!=tolower(s[r]))
                return false;
            else
            {
                l++;
                r--;
            }
        }
        return true;

    }
};

->STRING TO INTEGER (ATOI)
class Solution {
public:
     int myAtoi(string s) {
        long long ans = 0;
        
        int i=0, n = s.length(), pos = 1;
        
        while(i<n and s[i] == ' ')
            i++;
        
        if(s[i] == '-' || s[i] == '+')
        {
            if(s[i] == '-')
                pos = -1;
            i++;
        }

        while(i<n && s[i] >= '0' && s[i] <= '9')
        {
            ans *= 10;
            ans += s[i]-'0';
            i++;

            if(ans*pos > INT_MAX)
                return INT_MAX;
            
            if(ans*pos < INT_MIN)
                return INT_MIN;
        }
            
        return ans*pos;
    }
};
